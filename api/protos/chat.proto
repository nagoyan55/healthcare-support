syntax = "proto3";

package healthcare.chat;

option go_package = "healthcare/chat";

// チャットサービスの定義
service ChatService {
  // 双方向ストリーミングでチャットを実現
  rpc Chat(stream ChatRequest) returns (stream ChatResponse);
  
  // ルーム情報の取得（単一リクエスト・レスポンス）
  rpc GetRoomInfo(RoomInfoRequest) returns (RoomInfoResponse);
}

// クライアントからのリクエストメッセージ
message ChatRequest {
  oneof event {
    JoinRoom join_room = 1;
    LeaveRoom leave_room = 2;
    SendMessage send_message = 3;
  }
}

// サーバーからのレスポンスメッセージ
message ChatResponse {
  oneof event {
    MessageReceived message_received = 1;
    RoomUpdated room_updated = 2;
    Error error = 3;
  }
  string timestamp = 4;
}

// ルーム参加リクエスト
message JoinRoom {
  string room_id = 1;
  string user_id = 2;
}

// ルーム退出リクエスト
message LeaveRoom {
  string room_id = 1;
  string user_id = 2;
}

// メッセージ送信リクエスト
message SendMessage {
  string room_id = 1;
  string content = 2;
  string sender_id = 3;
}

// メッセージ受信イベント
message MessageReceived {
  string message_id = 1;
  string room_id = 2;
  string content = 3;
  User sender = 4;
}

// ルーム更新イベント
message RoomUpdated {
  string room_id = 1;
  repeated User active_users = 2;
}

// エラーイベント
message Error {
  enum ErrorCode {
    UNKNOWN = 0;
    AUTH_ERROR = 1;
    ROOM_NOT_FOUND = 2;
    INVALID_MESSAGE = 3;
  }
  ErrorCode code = 1;
  string message = 2;
}

// ユーザー情報
message User {
  string id = 1;
  string name = 2;
  string role = 3;
}

// ルーム情報リクエスト
message RoomInfoRequest {
  string room_id = 1;
}

// ルーム情報レスポンス
message RoomInfoResponse {
  string room_id = 1;
  repeated User active_users = 2;
  int32 message_count = 3;
  string last_activity = 4;
}
