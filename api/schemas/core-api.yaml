openapi: 3.0.0
info:
  title: Healthcare Core API
  version: 1.0.0
  description: Healthcare support application core REST API specification

servers:
  - url: http://localhost:3000/api
    description: Development server

components:
  schemas:
    # 患者情報
    Patient:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        roomNumber:
          type: string
        admissionDate:
          type: string
          format: date
        condition:
          type: string
          enum: [stable, critical]
      required: [id, name, roomNumber, admissionDate, condition]

    # スタッフ情報
    Staff:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        role:
          type: string
          enum: [doctor, nurse]
      required: [id, name, role]

    # タスク情報
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patientId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in_progress, completed]
        priority:
          type: string
          enum: [low, medium, high]
        assigneeId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [patientId, title, status, assigneeId, dueDate]

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

paths:
  # 患者API
  /patients:
    get:
      summary: 患者一覧取得
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: search
          schema:
            type: string
          description: 患者名や部屋番号による検索
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Patient'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer

  /patients/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: 患者詳細取得
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'

  # スタッフAPI
  /staff:
    get:
      summary: スタッフ一覧取得
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [doctor, nurse]
          description: スタッフの役割による絞り込み
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Staff'

  /staff/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: スタッフ詳細取得
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Staff'

  # タスクAPI
  /patients/{patientId}/tasks:
    parameters:
      - in: path
        name: patientId
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: タスク一覧取得
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, in_progress, completed]
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high]
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: タスク作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /patients/{patientId}/tasks/{taskId}:
    parameters:
      - in: path
        name: patientId
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: taskId
        required: true
        schema:
          type: string
          format: uuid
    put:
      summary: タスク更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: タスク削除
      responses:
        '204':
          description: 削除成功
